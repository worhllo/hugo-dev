[{"content":"什么是短代码 (shortcodes) 短代码是在内容文件中调用内置或自定义模板的简单片段。位于内容文件中，Hugo将使用预定义的模板来渲染它。短代码可以随时更新以反映新的类、技术或标准。在网站生成时，Hugo的短代码将轻松合并您的更改。\n请注意，短代码在模板文件中不起作用。如果你需要在模板中提供类似短代码的功能，则要在Hugo根目录下的. /layouts/shortcodes/ 创建 shortcodename.html 文件， shortcodename 为你短代码的名字。\n语法 这里先写一些Hugo的简单语法😙，如:\n1 {{ index .Params 0 }} 该代码表达为获取短代码中的第一个参数，\n1 {{ index .Params 1 }} 如果是这样，则代表第二个，以此类推。\n1 {{ .Get \u0026#34;text1\u0026#34; }} 此代码表达为获取参数名为text1的参数，\n1 {{\u0026lt; myshortscode text=\u0026#34;文本\u0026#34; \u0026gt;}}， 如果引用代码如上，那么传入的参数则为“文本”二字。\n1 {{/* .Date.Format ( default \u0026#34;2006-01-02\u0026#34;) */}} 传入日期则采用以上代码，后面为可以格式化的日期样式。\n1 {{ /*with .Site.Params.footer.customText */}} 使用上述语句可以引用站点配置文件中定义的变量值。\n如何在代码块内书写Shortcodes 如果直接在代码块写shortcodes，hugo会解析这部分代码。要跳过解析的话需要在\u0026lt;和\u0026gt;符号之前分别加上/*和*/：\n汇总 高亮 创建方法\n创建mark.html文件，其中内容编写： 1 \u0026lt;mark\u0026gt;{{ .Get \u0026#34;text\u0026#34; }}\u0026lt;/mark\u0026gt; 样式\n这是一个重点标记 更多\n这样一个简单的短代码便实现啦，但默认的高亮为荧光黄色，看起来有点刺眼，那么可以在./assets/scss/custom.css中增加mark标记的样式，代码如下。 1 2 3 mark{ background: hsla(332, 81%, 58%, 0.879); } 使用模板\n{{\u0026lt; mark text=\u0026ldquo;这是一个重点标记\u0026rdquo; \u0026gt;}} 缩写 创建方法\n创建abbr.html文件，其中内容编写： 1 \u0026lt;abbr title=\u0026#34;{{ .Get \u0026#34;title\u0026#34; }}\u0026#34;\u0026gt;{{ .Get \u0026#34;text\u0026#34; }}\u0026lt;/abbr\u0026gt; 样式\n缩写的文本 使用模板\n{{\u0026lt; abbr title=\u0026ldquo;这里有着非常非常非常非常非常非常非常非常长的缩写内容~\u0026rdquo; text=\u0026ldquo;缩写的文本\u0026rdquo; \u0026gt;}} 文本位置 创建方法 创建align.html文件，其中内容编写： 1 \u0026lt;p style=\u0026#34;text-align:{{ index .Params 0 }}\u0026#34;\u0026gt;{{ index .Params 1 | markdownify }}\u0026lt;/p\u0026gt; 样式\n文字居中\n更多\n理解起来也非常简单😘，首先align.html内容为一段html5编码，p标签为段落，我们要实现的自由变动文本位置需要使用css样式text-align，这里能用的参数有：center、left、right。 使用模板\n{{\u0026lt; align center \u0026ldquo;文字居中\u0026rdquo; \u0026gt;}} 块引用 创建方法\n创建blockquote.html文件，拷贝以下内容。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;!-- reset scratch variables at the start --\u0026gt; {{ $.Scratch.Set \u0026#34;bl_author\u0026#34; false }} {{ $.Scratch.Set \u0026#34;bl_source\u0026#34; false }} {{ $.Scratch.Set \u0026#34;bl_link\u0026#34; false }} {{ $.Scratch.Set \u0026#34;bl_title\u0026#34; false }} {{ if .IsNamedParams }} {{ $.Scratch.Set \u0026#34;bl_author\u0026#34; (.Get \u0026#34;author\u0026#34;) }} {{ $.Scratch.Set \u0026#34;bl_source\u0026#34; (.Get \u0026#34;source\u0026#34;) }} {{ $.Scratch.Set \u0026#34;bl_link\u0026#34; (.Get \u0026#34;link\u0026#34;) }} {{ $.Scratch.Set \u0026#34;bl_title\u0026#34; (.Get \u0026#34;title\u0026#34;) }} {{ else }} \u0026lt;!-- for the positional version if any --\u0026gt; {{ end }} \u0026lt;!-- if title is not set explicitly then we need to beautify the link if length of link is more than 32 chars, we will cut it off by 32 and then drop everything after the last / if any and put it in into title --\u0026gt; {{ with $.Scratch.Get \u0026#34;bl_title\u0026#34; }} \u0026lt;!-- do nothing --\u0026gt; {{ else }} {{ with $.Scratch.Get \u0026#34;bl_link\u0026#34; }} \u0026lt;!-- if link is given --\u0026gt; {{ range last 1 (split ($.Scratch.Get \u0026#34;bl_link\u0026#34; ) \u0026#34;://\u0026#34;) }} \u0026lt;!-- split by :// and then only take the items after it to remove protocol:// --\u0026gt; {{ $.Scratch.Set \u0026#34;title_without_protocol\u0026#34; . }} {{ end }} {{ range last 1 (split ($.Scratch.Get \u0026#34;title_without_protocol\u0026#34; ) \u0026#34;www.\u0026#34;) }} \u0026lt;!-- also remove the www. at the start if any. we are using a second split because all URLS may not start with it --\u0026gt; {{ $.Scratch.Set \u0026#34;title_without_protocol\u0026#34; . }} {{ end }} {{ $.Scratch.Set \u0026#34;bl_title\u0026#34; ($.Scratch.Get \u0026#34;title_without_protocol\u0026#34;) }} \u0026lt;!-- if link is longer than 32 bytes we should trim it --\u0026gt; {{ if (gt (len ($.Scratch.Get \u0026#34;title_without_protocol\u0026#34;) ) 32) }} {{ $title := (slicestr ($.Scratch.Get \u0026#34;title_without_protocol\u0026#34;) 0 32) }} \u0026lt;!-- get the first 32 characters of title_without_protocol --\u0026gt; {{ $split_by_fw_slash := split $title \u0026#34;/\u0026#34; }} \u0026lt;!-- now split on / because we want to stop after the last forward slash --\u0026gt; {{ $count := (sub (len $split_by_fw_slash) 1) }} \u0026lt;!-- we want everything but the last part so we adjust the count accordingly --\u0026gt; {{ $.Scratch.Set \u0026#34;tempstring\u0026#34; \u0026#34;\u0026#34; }} \u0026lt;!-- temp variable to hold the concatinated string --\u0026gt; {{ range first $count $split_by_fw_slash }} \u0026lt;!-- loop through all parts except last and concat them (add / between halves) --\u0026gt; {{ $.Scratch.Set \u0026#34;tempstring\u0026#34; ( . | printf \u0026#34;%s%s/\u0026#34; ($.Scratch.Get \u0026#34;tempstring\u0026#34;) | printf \u0026#34;%s\u0026#34; ) }} {{ end }} {{ $.Scratch.Set \u0026#34;bl_title\u0026#34; ( printf \u0026#34;%s...\u0026#34; ($.Scratch.Get \u0026#34;tempstring\u0026#34;) | printf \u0026#34;%s\u0026#34; ) }} {{ end }} {{ end }} {{ end }} \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;{{ .Inner | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;footer style=\u0026#34;text-align:right\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;{{ with $.Scratch.Get \u0026#34;bl_author\u0026#34; }}{{ . }}{{ end }}\u0026lt;/strong\u0026gt; {{ with $.Scratch.Get \u0026#34;bl_source\u0026#34; }} \u0026lt;cite\u0026gt;{{ . }}\u0026lt;/cite\u0026gt; {{ else }} {{ with $.Scratch.Get \u0026#34;bl_link\u0026#34; }} \u0026lt;cite\u0026gt; \u0026lt;a href=\u0026#34;{{ . }}\u0026#34; title=\u0026#34;{{ . }}\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ $.Scratch.Get \u0026#34;bl_title\u0026#34; }}\u0026lt;/a\u0026gt; \u0026lt;!-- can\u0026#39;t have new lines here --\u0026gt; \u0026lt;/cite\u0026gt; {{ else }} {{ with $.Scratch.Get \u0026#34;bl_title\u0026#34; }} \u0026lt;cite\u0026gt; {{ $.Scratch.Get \u0026#34;bl_title\u0026#34; }}\u0026lt;/a\u0026gt; \u0026lt;/cite\u0026gt; {{ end }} {{ end }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/blockquote\u0026gt; 样式\n死亡不是一切的终点，遗忘才是。\n电影 《寻梦环游记》 使用模板\n{{\u0026lt; blockquote author=\u0026ldquo;电影\u0026rdquo; link=\u0026ldquo;https://irithys.com \u0026rdquo; title=\u0026quot;《寻梦环游记》\u0026quot; \u0026gt;}} 死亡不是一切的终点，遗忘才是 {{\u0026lt; /blockquote \u0026gt;}} 3.5. 隐藏 方法\n创建detail.html文件，拷贝其中内容： 1 2 3 4 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{{ (.Get 0) | markdownify }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt; 样式\n点下我呀🎁 对看到这行文字的人报以深切的祝福🥰！ 使用模板\n{{\u0026lt; detail \u0026ldquo;点下我呀🎁\u0026rdquo; \u0026gt;}} 对看到这行文字的人报以深切的祝福！🥰 {{\u0026lt; /detail \u0026gt;}} 3.6. 标签 创建方法\n创建notice.html文件，拷贝以下内容： 1 2 3 4 5 6 7 8 9 10 11 {{- $noticeType := .Get 0 -}} {{- $raw := (markdownify .Inner | chomp) -}} {{- $block := findRE \u0026#34;(?is)^\u0026lt;(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $raw 1 -}} {{ $icon := (replace (index $.Site.Data.SVG $noticeType) \u0026#34;icon\u0026#34; \u0026#34;icon notice-icon\u0026#34;) }} \u0026lt;div class=\u0026#34;notice {{ $noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt; \u0026lt;div class=\u0026#34;notice-title\u0026#34;\u0026gt;{{ $icon | safeHTML }}\u0026lt;/div\u0026gt; {{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;p\u0026gt;{{ $raw }}\u0026lt;/p\u0026gt;{{ end -}} \u0026lt;/div\u0026gt; 在/assets/scss/custom.scss中新加入以下样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 .notice { position:relative; padding: 1em 1em 1em 2.5em; margin-bottom: 1em; border-radius: 4px; p:last-child { margin-bottom: 0; } .notice-title { position: absolute; left: 0.8em; .notice-icon { width: 1.2em; height: 1.2em; } } \u0026amp;.notice-warning { background: hsla(0, 65%, 65%, 0.15); border-left: 5px solid hsl(0, 65%, 65%); .notice-title { color: hsl(0, 65%, 65%); } } \u0026amp;.notice-info { background: hsla(30, 80%, 70%, 0.15); border-left: 5px solid hsl(30, 80%, 70%); .notice-title { color: hsl(30, 80%, 70%); } } \u0026amp;.notice-note { background: hsla(200, 65%, 65%, 0.15); border-left: 5px solid hsl(200, 65%, 65%); .notice-title { color: hsl(200, 65%, 65%); } } \u0026amp;.notice-tip { background: hsla(140, 65%, 65%, 0.15); border-left: 5px solid hsl(140, 65%, 65%); .notice-title { color: hsl(140, 65%, 65%); } } } [data-theme=\u0026#34;dark\u0026#34;] .notice { \u0026amp;.notice-warning { background: hsla(0, 25%, 35%, 0.15); border-left: 5px solid hsl(0, 25%, 35%); .notice-title { color: hsl(0, 25%, 35%); } } \u0026amp;.notice-info { background: hsla(30, 25%, 35%, 0.15); border-left: 5px solid hsl(30, 25%, 35%); .notice-title { color: hsl(30, 25%, 35%); } } \u0026amp;.notice-note { background: hsla(200, 25%, 35%, 0.15); border-left: 5px solid hsl(200, 25%, 35%); .notice-title { color: hsl(200, 25%, 35%); } } \u0026amp;.notice-tip { background: hsla(140, 25%, 35%, 0.15); border-left: 5px solid hsl(140, 25%, 35%); .notice-title { color: hsl(140, 25%, 35%); } } } 样式\n样式一，警告： 警告！这个标签太好看了，我忍不住分享。\n样式二，信息： 明确的爱，直接的厌恶，真诚的喜欢。站在太阳下的坦荡，大声无愧地称赞自己。\n样式三，贴条： 遇到一些需要做提示性语句的位置，可以贴个条。\n样式四，注释： 我想要的不是解释，而是注释。\n使用模板\n{{\u0026lt; notice notice-warning \u0026gt;}} 警告！这个标签太好看了，我忍不住分享。 {{\u0026lt; /notice \u0026gt;}} 3.7. 音乐 创建方法 打开根目录的config.yaml文件，修改以下内容： 1 2 3 4 markup: goldmark: renderer: unsafe: true 新建music.html文件夹，拷贝以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {{ if .IsNamedParams }} \u0026lt;meting-js id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; }}\u0026#34; server=\u0026#34;{{ .Get \u0026#34;server\u0026#34; }}\u0026#34; type=\u0026#34;{{ .Get \u0026#34;type\u0026#34; }}\u0026#34; fixed=\u0026#34;{{ if .Get \u0026#34;fixed\u0026#34; }}{{ .Get \u0026#34;fixed\u0026#34; }}{{ else }}false{{ end }}\u0026#34; mini=\u0026#34;{{ if .Get \u0026#34;mini\u0026#34; }}{{ .Get \u0026#34;mini\u0026#34; }}{{ else }}false{{ end }}\u0026#34; autoplay=\u0026#34;{{ if .Get \u0026#34;autoplay\u0026#34; }}{{ .Get \u0026#34;autoplay\u0026#34; }}{{ else }}false{{ end }}\u0026#34; loop=\u0026#34;{{ if .Get \u0026#34;loop\u0026#34; }}{{ .Get \u0026#34;loop\u0026#34; }}{{ else }}none{{ end }}\u0026#34; theme=\u0026#34;{{ if .Get \u0026#34;autoplay\u0026#34; }}{{ .Get \u0026#34;autoplay\u0026#34; }}{{ else }}#255579{{ end }}\u0026#34; volume=\u0026#34;{{ if .Get \u0026#34;volume\u0026#34; }}{{ .Get \u0026#34;volume\u0026#34; }}{{ else }}0.6{{ end }}\u0026#34; prelosd=\u0026#34;{{ if .Get \u0026#34;prelosd\u0026#34; }}{{ .Get \u0026#34;prelosd\u0026#34; }}{{ else }}auto{{ end }}\u0026#34; mutex=\u0026#34;{{ if .Get \u0026#34;mutex\u0026#34; }}{{ .Get \u0026#34;mutex\u0026#34; }}{{ else }}true{{ end }}\u0026#34; list-folded=\u0026#34;{{ if .Get \u0026#34;list-folded\u0026#34; }}{{ .Get \u0026#34;list-folded\u0026#34; }}{{ else }}true{{ end }}\u0026#34;\u0026gt; \u0026lt;/meting-js\u0026gt; {{ end }} 样式\n使用模板\n{{\u0026lt; music id=\u0026ldquo;557578993\u0026rdquo; type=\u0026ldquo;song\u0026rdquo; server=\u0026ldquo;netease\u0026rdquo; \u0026gt;}} 更多\n此处的id为音乐的网址id，如我上面引用的音乐，地址为https://music.163.com/#/song?id=557578993，server代表用的哪家的服务，netease代表网易，还可以使用有腾讯tencent，酷狗kugou，百度baidu。 3.8. 哔站 创建方法\n创建bilibili.html文件，拷贝以下内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {{ $vid := (.Get 0) }} {{ $videopage := default 1 (.Get 1) }} {{ $basicQuery := querify \u0026#34;page\u0026#34; $videopage \u0026#34;high_quality\u0026#34; 1 \u0026#34;as_wide\u0026#34; 1 }} {{ $videoQuery := \u0026#34;\u0026#34; }} {{ if strings.HasPrefix (lower $vid) \u0026#34;av\u0026#34; }} {{ $videoQuery = querify \u0026#34;aid\u0026#34; (strings.TrimPrefix \u0026#34;av\u0026#34; (lower $vid)) }} {{ else if strings.HasPrefix (lower $vid) \u0026#34;bv\u0026#34; }} {{ $videoQuery = querify \u0026#34;bvid\u0026#34; $vid }} {{ else }} \u0026lt;p\u0026gt;Bilibili 视频av号或BV号错误！请检查视频av号或BV号是否正确\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;当前视频av或BV号：{{ $vid }}，视频分P：{{ $videopage }}\u0026lt;/p\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;video-wrapper\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.bilibili.com/player.html?{{ $basicQuery | safeURL }}\u0026amp;{{ $videoQuery | safeURL }}\u0026#34; scrolling=\u0026#34;no\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 样式\n使用模板\n{{\u0026lt; bilibili BV1NF411J7JH \u0026gt;}} 3.9. 网抑云 创建方法\n新建netease.html文件，拷贝以下内容： 1 \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=100% height=86 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id={{ index .Params 0 }}\u0026amp;auto={{ index .Params 1 }}\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; 样式\n使用模板\n{{\u0026lt; netease 557578993 0 \u0026gt;}} 3.10 在博文之间Cross references引用 创建方法\n系统已经内置，无需另外创建 样式\nHugo+Github博客部署 使用模板\n[some text]({{\u0026lt; relref \u0026ldquo;first-post#heading\u0026rdquo; \u0026gt;}})，其中first-post为博文所在的文件夹名字，some text名字任意自定，heading为正文内容，几个字即可。 3.11 聊天气泡 创建方法\n在 /layouts/shortcodes 创建chat.html并填入以下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 {{ if eq (.Get \u0026#34;position\u0026#34;) \u0026#34;left\u0026#34; }} \u0026lt;div class=\u0026#34;chat --other\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__meta\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Get \u0026#34;timestamp\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chat__text\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else if eq (.Get \u0026#34;position\u0026#34;) \u0026#34;right\u0026#34; }} \u0026lt;div class=\u0026#34;chat --self\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__meta\u0026#34; style=\u0026#34;text-align: right;\u0026#34;\u0026gt;{{ .Get \u0026#34;timestamp\u0026#34; }}\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chat__text\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;style\u0026gt; .chat { margin: 10px; padding: 10px; position: relative; /* 添加相对定位，以便定位尖角箭头 */ transition: transform 0.2s; /* 添加过渡效果，使放大平滑 */ max-width: 80%; min-width: 15%; } .chat:hover { transform: scale(1.05); } .chat.--self { text-align: left; background-color: #ecf5ff; color: #000000; border-radius: 15px; width: fit-content; margin-left: auto; } /* 尖角箭头 */ .chat.--self::before { content: \u0026#34;\u0026#34;; position: absolute; right: -18px; /* 调整箭头位置 */ bottom: 5px; transform: translateY(-50%); border-width: 15px 0 0 20px; border-style: solid; border-color: transparent transparent transparent #ecf5ff; /* 箭头颜色与对话框背景颜色一致 */ } /* 左边对话框样式 */ .chat.--other { text-align: left; background-color: #ffecec; color: #333; border-radius: 15px; position: relative; width: fit-content; } /* 左边对话框的尖角箭头 */ .chat.--other::before { content: \u0026#34;\u0026#34;; position: absolute; left: -18px; bottom: 5px; transform: translateY(-50%); border-width: 15px 20px 0 0; border-style: solid; border-color: transparent #ffecec transparent transparent; } /* 消息元数据样式（名称和时间戳） */ .chat__meta { font-weight: bold; font-size: 0.67em; color: #707070; margin-bottom: 5px; } /* 消息文本样式 */ .chat__text { font-size: 0.9em; margin-left: 10px; word-break: break-all; } [data-scheme=\u0026#34;dark\u0026#34;] { .chat.--self { color: #fefefe; background-color: #253958; } .chat.--self::before { border-color: transparent transparent transparent #253958; } .chat.--other { color: #fefefe; background-color: #1a1a1a; } .chat.--other::before { border-color: transparent #1a1a1a transparent transparent; } .chat__meta { color: #b1b1b1; } } \u0026lt;/style\u0026gt; 样式\nJohn Doe\u0026nbsp;\u0026nbsp;\u0026nbsp;2023-09-12 14:30 这是左边的消息内容。 2023-09-12 14:45\u0026nbsp;\u0026nbsp;\u0026nbsp;Alice 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 使用模板\n{{\u0026lt; chat position=\u0026ldquo;left\u0026rdquo; name=\u0026ldquo;John Doe\u0026rdquo; timestamp=\u0026ldquo;2023-09-12 14:30\u0026rdquo;\u0026gt;}} 这是左边的消息内容。 {{\u0026lt; /chat \u0026gt;}} {{\u0026lt; chat position=\u0026ldquo;right\u0026rdquo; name=\u0026ldquo;Alice\u0026rdquo; timestamp=\u0026ldquo;2023-09-12 14:45\u0026rdquo; \u0026gt;}} 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 {{\u0026lt; /chat \u0026gt;}} 时间轴 创建方法\n在 /layouts/shortcodes 创建 timeline.html 并填入以下代码{{- $date := .Get \u0026#34;date\u0026#34; -}} {{- $title := .Get \u0026#34;title\u0026#34; -}} {{- $description := .Get \u0026#34;description\u0026#34; -}} {{- $tags := .Get \u0026#34;tags\u0026#34; -}}{{- $url := .Get \u0026#34;url\u0026#34; -}} \u0026lt;div class=\u0026#34;timeline__row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__time\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__time\u0026#34;\u0026gt;{{ $date }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;timeline__split-line\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;timeline__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__tags\u0026#34;\u0026gt; {{- with split $tags \u0026#34;, \u0026#34; -}} {{- range . }}{{- if eq . \u0026#34;样式\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-style\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else if eq . \u0026#34;文章\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-article\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else if eq . \u0026#34;页面\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-page\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else }} \u0026lt;span class=\u0026#34;timeline__tag\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- end }} {{- end }} {{- end }} \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;{{ $url }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__title\u0026#34;\u0026gt;{{ $title }}\u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- title 可点击，默认就是跳转时间轴所在页 --\u0026gt; \u0026lt;div class=\u0026#34;timeline__description\u0026#34;\u0026gt; {{ $description }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; .timeline { display: flex; flex-direction: column; } .timeline__row { display: flex; padding-left: 4%; height: 90px; } .timeline__time { flex: 0 0 110px; color: #5d5d5d; font-size: 17px; text-transform: uppercase; position: relative; display: flex; flex-direction: column; align-items: center; padding: 0.5rem 0; } .timeline__time-text { margin: 0; } .timeline__split-line { position: absolute; top: 0.5rem; right: -20px; height: 100%; width: 2px; background-color: #84c4e240; z-index: 0; } .timeline__split-line:before { content: \u0026#34;\u0026#34;; position: absolute; top: 24%; right: -4px; transform: translateY(-50%); width: 10px; height: 10px; background-color: #c9e5f2; box-shadow: 0 0 0 4px var(--theme); border-radius: 50%; border: 0px solid #84c4e2; z-index: -1; } .timeline__content { flex: 1; margin-left: 4.5rem; padding: 0.5rem 0 1.2rem 0; } .timeline__title { margin: 0; margin-bottom: 2px; padding-top: 3px; margin-left: 0.5rem; color: var(--content); font-family: var(--font-family-teshu); font-size: 19px; font-weight: 600; width: fit-content; display: inline-block; vertical-align: middle; /* 垂直居中对齐 */ } .timeline__tags { display: inline-block; padding: 0; margin-left: 0.3rem; align-items: center; gap: 0.3rem; } .timeline__tag { display: inline-block; color: var(--secondary); background-color: #84c4e230; border: 1.5px solid #84c4e230; border-radius: 999px; padding: 0rem 0.5rem; font-size: 12px; white-space: nowrap; line-height: 1.4rem; opacity: 0.8; vertical-align: middle; /* 垂直居中对齐 */ } .timeline__description { font-size: 15px; line-height: 1.6; color: #5d5d5d; overflow: hidden; text-overflow: ellipsis; margin: 0.5rem 0 0.4rem 1.5rem; /* 添加 1.5rem 的左侧内边距 */ } /* 为类名为 \u0026#34;timeline__tag-style\u0026#34; 的标签定义颜色 */ .timeline__tag-style { background-color: #c581da; /* 替换为你希望的颜色 */ border-color: #c581da; /* 与背景色相同或不同，根据需要自定义 */ color: #FFFFFF; /* 根据需要选择文本颜色 */ } /* 为类名为 \u0026#34;timeline__tag-article\u0026#34; 的标签定义颜色 */ .timeline__tag-article { background-color: #92d392; /* 替换为你希望的颜色 */ border-color: #92d392; /* 与背景色相同或不同，根据需要自定义 */ color: #000000; /* 根据需要选择文本颜色 */ } /* 为类名为 \u0026#34;timeline__tag-page\u0026#34; 的标签定义颜色 */ .timeline__tag-page { background-color: #707070; /* 替换为你希望的颜色 */ border-color: #707070; /* 与背景色相同或不同，根据需要自定义 */ color: #FFFFFF; /* 根据需要选择文本颜色 */ } @media screen and (max-width: 768px) { .timeline__time { font-size: 14px; /* 在小屏幕上使用较小的字体大小 */ } .timeline__title { font-size: 16px; /* 在小屏幕上使用较小的字体大小 */ } .timeline__description { font-size: 14px; /* 在小屏幕上使用较小的字体大小 */ } } \u0026lt;/style\u0026gt; 样式\n2023-10-01 节日 国庆节 祖国生日快乐 使用模板\n{{\u0026lt; timeline date=\u0026ldquo;2023-10-01\u0026rdquo; title=\u0026ldquo;国庆节\u0026rdquo; description=\u0026ldquo;祖国生日快乐\u0026rdquo; tags=\u0026ldquo;节日\u0026rdquo; url=\u0026quot;\u0026quot; \u0026gt;}} 本文出处 来写一些好玩的 Hugo 短代码吧 Hugo Stack主题装修笔记 一些 Hugo 短代码 ","date":"2024-11-20T13:31:47+08:00","image":"https://imgbed.worhllo.us.kg/file/1732201090794_dfafd.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/shortcode%E6%B1%87%E6%80%BB/","title":"Shortcode汇总"},{"content":"一、前言 代理（Proxy） 是一种充当客户端和目标服务器之间中介的服务器或服务。当你发送网络请求时，代理服务器会代表你向目标服务器请求数据，并将响应转发给你的设备。代理服务器充当了一个**中转站，处理你的请求并将数据传递给你，同时隐藏了你的真实IP地址。\nVPN（Virtual Private Network）是一种通过在公共网络上创建加密隧道来保护用户隐私和安全的技术。它通过在你的设备和VPN服务器之间建立安全的连接，将你的网络流量加密并传输到目标服务器，从而在互联网上创建了一个虚拟的私有网络。使用VPN时，你的所有网络流量都经过加密处理，以防止第三方截获或监视你的数据。VPN技术可以有效保护你的隐私和安全。\n代理服务器的主要功能是充当客户端和目标服务器之间的中介。它可以隐藏你的真实IP地址，帮助你绕过地理限制，实施访问控制和过滤，并提供缓存和加速功能。代理服务器通常在局部范围内使用，比如在公司内部网络中，用于管理和控制内部网络访问。\nVPN是一种通过在公共网络上创建加密隧道来保护隐私和安全的技术。它的主要功能是加密你的数据流量、隐藏你的真实IP地址、绕过地理限制和提供安全的网络连接。VPN广泛应用于个人和商业领域，用于保护个人隐私、提供安全的远程访问和连接分布在不同地区的网络。\n虽然代理服务器和VPN在某些方面有相似的功能，但VPN提供了更全面的隐私和安全保护，因为它加密了整个网络连接而不仅仅是浏览器或特定应用程序的流量。此外，VPN还可以在不同的网络中建立安全连接，使你能够访问远程资源和保护敏感数据。\n共同的作用可以简单概括为以下五点：隐藏真实IP地址；访问控制和过滤；缓存和加速；绕过地理限制；加密通信\nCloudflare 是一家全球性的云平台，提供广泛的网络服务，旨在提升各类企业的安全性和性能。具有VPN以下几大优点：加速网站速度；增强网站安全性：提高网站可用性；优化搜索引擎排名等，最重要的是，Cloudflare 提供了许多免费服务，因此，我们就能通Cloudflate搭建属于自己的免费代理节点，不用我们自己的服务器，甚至使用的可以是免费的域名，零成本完全免费。好，话不多说，正式开始.\n二、具体部署方法 1.注册cloudflare账户 打开cloudflare 中文官网，点击注册。完成人机验证后点击注册。操作无误的话会直接进入cloudflare后台,会提示你先输入一个域名，没有域名的话可以暂时忽略。同样可以在右上角切换语言。此时你的邮箱会受到一封验证邮件，点击邮件的链接地址进行验证，验证完成后重新登录到后台。 2.创建pages项目的前提准备 构建应用程序 如果是新注册账户，在后台中有个开发引导，点击在我们的开发平台构建开始构建，如果不是新账户则直接点击左侧的works和pages导航栏。 接着选择构建应用程序workers和pages(Creat)跳转页面后点击切换到pages选项卡。可以看到，有两种途径可以部署pages,一个是使用git仓库（github或者gitlab），另外一个是直接上传文件。使用git仓库最为简单，当我们修改文件时候不需要一次次地重复上传，但是考虑可能有的朋友没有github账户，这里使用上传文件的方式来演示。##### 下载文件\n在github上面有很多使用cloudflare实现代理的仓库，你可以根据你自己的喜好选择，但是部署方式都是大同小异。这里我使用edgetunnel ，因为使用文件上传方式进行部署，所以首先下载文件 ，下载的文件名是edgetunnel-main.zip。\n3.创建pages项目 创建项目名称 添加你的项目名称，名称任意。\n.jpg)\n上传文件 选择刚才下载好的edgetunnel-main.zip 压缩包上传\n部署站点 上传完成后选择部署站点\n生成UUID 提示部署成功后，还需要添加一下环境变量，点击右下角的继续处理项目，我们还需要添加一个环境变量，即UUID。在设置选项中，选择添加变量，添加一个名称为UUID的变量，UUID/GGID可以在该网址 Online UUID Generator 生成。\n添加UUID变量 将生成的UUID添加到环境变量，注意一下变量名称UUID是大写。记得点击保存。\n重新部署 然后回到部署选项，选择创建新部署或者创建部署，再次上传刚才下载的edgetunnel-main.zip压缩包，然后点击保存并部署。这样就能达到重新触发部署的目的，如果是使用git仓库的话就不需要重复上传文件了。部署成功如下第二张图：\n4.更换自定义域名（可换可不换） 进入到你的pages项目的自定义域选项，选择设置自定义域。设置自定义域名的格式是：{自定义的前缀}.{你的免费域名} 。输入后跳转页面点击激活\n稍等一会查看自定义域选项,如果状态为绿色则证明激活有效，至此自定义域名已经完成。现在就可以使用自定义域名访问你的page项目了。\n5.客户端v2rayN设置 获取订阅地址 上述必须的步骤完成后，如果你为进行自定义域名，那么回到你的pages项目的部署选项, 点击两个链接中的任意一个，就会看到一些json数据。如果你设置了自定义域名，那么使用自定义域名亦可访问。然后在链接地址后面添加/你的uuid值，点击回车后，就能看到几串订阅地址，订阅地址选择红框中的任意一个即可。\n下载v2rayN 点击跳转即可下载，下载完毕后，点击添加订阅组，把刚复制的订阅链接添加到地址中，接着在订阅分组中，选择更新当前订阅分组，可以使用不通过代理方式。\n测试服务器真连接延迟 全选所有节点，右键点击测试服务器真连接延迟。选择一个合适的节点设置为活动服务器后，即可测试google，youtube等网站的连接情况。\n设置单一节点（非必选） 如果你使用的是v2rayN，使用单一节点，直接复制该内容粘贴到你的面板，即为单一节点 三、本文出处 使用Cloudflate搭建自己的免费代理节点 (eimoon.com) ","date":"2024-11-18T15:26:15+08:00","image":"https://imgbed.worhllo.us.kg/file/1731915064298_wd.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/%E4%BD%BF%E7%94%A8cloudflare%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9/","title":"使用Cloudflare搭建自己的免费代理节点"},{"content":"hugo 博客美化参考教程 Hugo ｜ 自定义 hugo-theme-Stack - Falasool 在Hugo中添加自定义面包屑导航 (eimoon.com) 博客魔改美化（通用） | Naive Koala (xalaok.top) Hugo Stack主题装修笔记 (thirdshire.com) hugo stack 主题美化 2 (yelleis.top) Hugo Stack主题更新小记 (xrg.fj.cn) 【Hugo】APlayer + PJAX 引入音乐播放放器并实现音乐不中断功能 (letere-gzj.github.io) hugo stack 主题美化 (yelleis.top) 使用 Hugo 对博客的重建与 Stack 主题优化记录 (oxidane-uni.github.io) Hugo+Stack主题集成Vercount统计网站访问信息 (farb.top) Hugo 的 LoveIt 主题修改及增强（三） - Stilig\u0026rsquo;s blog Hugo：总字数统计 | Blog (huuuuuuo.github.io) Hugo：博客运行时间 | Blog (huuuuuuo.github.io) Hugo：一键回到顶部 | Blog (huuuuuuo.github.io) Hugo：自定义字体 | Blog (huuuuuuo.github.io) Hugo：访问量统计 | Blog (huuuuuuo.github.io) Hugo：内容折叠与代码块大小限制 | Blog (huuuuuuo.github.io) Hugo：图片点击放大 | Blog (huuuuuuo.github.io) Hugo：添加热力图 | Blog (huuuuuuo.github.io) Hugo：添加随机浏览文章功能 | Blog (huuuuuuo.github.io) Hugo：阅读进度条 | Blog (huuuuuuo.github.io) Hugo：归档改为年月日统计 | Blog (huuuuuuo.github.io) Hugo Stack 主题美化 (limuran.top) Hugo 添加 Giscus 评论 - Stilig\u0026rsquo;s blog 给 Hugo 加一点好玩的功能 (irithys.com) hugo添加utterances🔮评论系统 | Chance 多语言 hugo 添加总字数统计和建站时间 - 滑翔闪\u0026rsquo;S BLOG (huaxiangshan.com) hugo博客音乐组件 (lihan3238.github.io) hugo模板自定义修改 (lihan3238.github.io) hugo模板自定义修改 (lihan3238.github.io) 如何在hugo生成的网页中插入嵌入式音乐 | Ian\u0026rsquo;s Site (neverstop.eu.org) Hugo博客 | stack主题修改第一站 (munlelee.github.io) hugo stack 主题美化 (yelleis.top) Hugo ｜ 自定义 hugo-theme-Stack - Falasool 【搬运】APLAYER FOR HUGO ShortCuts 短代码 建站技术 | 使用 Hugo + Stack 简单搭建一个博客 Hugo Stack 主题配置与使用 Gmeek 博客教程汇总 meekdai.github.io cao-gift.github.io tiengming.github.io ","date":"2024-11-16T17:47:34+08:00","image":"https://imgbed.worhllo.us.kg/file/1731732863804_Markdown.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/%E9%9A%8F%E7%AC%94%E6%B5%8B%E8%AF%95/","title":"随笔测试"},{"content":"前言 Hugo Stack 是一款专为博主设计的卡片风格的 Hugo 主题。它提供了一套丰富的特性集合，包括自动生成目录、本地搜索、代码高亮、图片放大等功能。该主题遵循 MIT 许可证发布，且其标志性的简洁与易用性让它成为众多个人博客的优选方案。详细信息可以通过访问 GitHub 来贡献代码或深入了解项目。\n原生的stack主题虽然已经挺好看的了，但是仍然还美化的空间；还有进步的可能性；还有不断完善的潜力，因此，集多篇大佬优质的博客于一篇文章中，这篇博客就此诞生！\n文件添加随机海报 点击展开代码，推荐在模板中设置，修改 archetypes/default.md（如果没有则新建一个即可） 1 2 3 4 5 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} image: https://picsum.photos/800/600.webp?random={{ substr (md5 (.Date)) 4 8 }} --- 添加彩虹背景 在layouts/partials/footer/custom.html 中增加以下内容 1 2 3 4 5 6 7 8 9 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/zhixuan2333/gh-blog@v0.1.0/js/ribbon.min.js\u0026#34; integrity=\u0026#34;sha384-UEK8ZiP3VgFNP8KnKMKDmd4pAUAOJ59Y2Jo3ED2Z5qKQf6HLHovMxq7Beb9CLPUe\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; size=\u0026#34;300\u0026#34; alpha=\u0026#34;0.6\u0026#34; zindex=\u0026#34;-1\u0026#34; defer \u0026gt;\u0026lt;/script\u0026gt; 滚动条美化 在assets/scss/custom.scss 添加以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //将滚动条修改为圆角样式 //菜单滚动条美化 .menu::-webkit-scrollbar { display: none; } // 全局滚动条美化 html { ::-webkit-scrollbar { width: 20px; } ::-webkit-scrollbar-track { background-color: transparent; } ::-webkit-scrollbar-thumb { background-color: #d6dee1; border-radius: 20px; border: 6px solid transparent; background-clip: content-box; } ::-webkit-scrollbar-thumb:hover { background-color: #a8bbbf; } } 选中文本样式美化 在assets/scss/custom.scss 添加以下内容 1 2 3 4 ::selection { color: #ffff; background: #557697; } 搜索菜单动画 在assets/scss/custom.scss 添加以下内容 1 2 3 4 5 6 7 .search-form.widget { transition: transform 0.6s ease; } .search-form.widget:hover { transform: scale(1.1, 1.1); } 归档动画 在assets/scss/custom.scss 添加以下内容 1 2 3 4 5 6 7 .widget.archives .widget-archive--list { transition: transform .3s ease; } .widget.archives .widget-archive--list:hover { transform: scale(1.05, 1.05); } 标签动画 在assets/scss/custom.scss 添加以下内容 1 2 3 4 5 6 7 8 9 .tagCloud .tagCloud-tags a { border-radius: 10px; font-size: 1.4rem; transition: transform .3s ease; } .tagCloud .tagCloud-tags a:hover { transform: scale(1.1, 1.1); } 归档页面双栏 在assets/scss/custom.scss 添加以下内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @media (min-width: 1024px) { .article-list--compact { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 16px; } } } 在文章中插入嵌入式音乐 第一步，在layouts\\shortcodes\\netese.html中添加以下内容 1 2 3 4 5 \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=330 height=86 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id=1304708603\u0026amp;auto=1\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; 第二步，在markdown文章中添加以下代码（#号删掉），后面的数字即网易云ID，点击网易云 ，选择喜欢的歌曲，复制导航栏的ID即可 1 {#{\u0026lt; netese 1304708603 \u0026gt;}#} 添加返回顶部按钮（方法1） 在 layouts/partials/footer/custom.html 内添加代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \u0026lt;!--返回顶部按钮 --\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;back-to-top\u0026#34; title=\u0026#34;返回顶部\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;!--返回顶部CSS --\u0026gt; \u0026lt;style\u0026gt; #back-to-top { display: none; position: fixed; bottom: 20px; right: 55px; width: 55px; height: 55px; border-radius: 7px; background-color: rgba(64, 158, 255, 0.5); box-shadow: var(--shadow-l2); font-size: 30px; text-align: center; line-height: 50px; cursor: pointer; } #back-to-top:before { content: \u0026#39; \u0026#39;; display: inline-block; position: relative; top: 0; transform: rotate(135deg); height: 10px; width: 10px; border-width: 0 0 2px 2px; border-color: var(--back-to-top-color); border-style: solid; } #back-to-top:hover:before { border-color: #2674e0; } /* 在屏幕宽度小于 768 像素时，钮位置调整 */ @media screen and (max-width: 768px) { #back-to-top { bottom: 20px; right: 20px; width: 40px; height: 40px; font-size: 10px; } } /* 在屏幕宽度大于等于 1024 像素时，按钮位置调整 */ @media screen and (min-width: 1024px) { #back-to-top { bottom: 20px; right: 40px; } } /* 在屏幕宽度大于等于 1280 像素时，按钮位置调整 */ @media screen and (min-width: 1280px) { #back-to-top { bottom: 20px; right: 55px; } } /* 目录显示时，隐藏按钮 */ @media screen and (min-width: 1536px) { #back-to-top { visibility: hidden; } } \u0026lt;/style\u0026gt; \u0026lt;!--返回顶部JS --\u0026gt; \u0026lt;script\u0026gt; function backToTop() { document.documentElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39;, }) } window.onload = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026gt; 0) { totopBtn.style.display = \u0026#39;inline\u0026#39; } else { totopBtn.style.display = \u0026#39;none\u0026#39; } } window.onscroll = function () { let scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop let totopBtn = this.document.getElementById(\u0026#39;back-to-top\u0026#39;) if (scrollTop \u0026lt; 200) { totopBtn.style.display = \u0026#39;none\u0026#39; } else { totopBtn.style.display = \u0026#39;inline\u0026#39; totopBtn.addEventListener(\u0026#39;click\u0026#39;, backToTop, false) } } \u0026lt;/script\u0026gt; 添加返回顶部按钮（方法2） 点击展开 在layouts/partials/backtop.html中添加代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;style\u0026gt; /* add BackTop */ #backtop { color: #c2c0c0; position: fixed; right: 25px; bottom: 25px; width: 35px; height: 35px; z-index: 999998; /* cursor: pointer; */ } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;backtop\u0026#34;\u0026gt; \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34; focusable=\u0026#34;false\u0026#34; data-prefix=\u0026#34;fas\u0026#34; data-icon=\u0026#34;chevron-circle-up\u0026#34; class=\u0026#34;svg-inline--fa fa-chevron-circle-up fa-w-16\u0026#34; role=\u0026#34;img\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt; \u0026lt;path fill=\u0026#34;currentColor\u0026#34; d=\u0026#34;M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm231-113.9L103.5 277.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L256 226.9l101.6 101.6c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L273 142.1c-9.4-9.4-24.6-9.4-34 0z\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var timer = null; backtop.onclick = function () { cancelAnimationFrame(timer); //获取当前毫秒数 var startTime = +new Date(); //获取当前页面的滚动高度 var b = document.body.scrollTop || document.documentElement.scrollTop; var d = 500; var c = b; timer = requestAnimationFrame(function func() { var t = d - Math.max(0, startTime - (+new Date()) + d); document.documentElement.scrollTop = document.body.scrollTop = t * (-c) / d + b; timer = requestAnimationFrame(func); if (t == d) { cancelAnimationFrame(timer); } }); } \u0026lt;/script\u0026gt; 然后在 layouts/_default/baseof.html 里面添加如下代码\n1 {{ partial \u0026#34;backtop.html\u0026#34; . }} 外部链接后面会显示图标 在layouts/_default/_markup/render-link.html里{{ .Text | safeHTML }}之后增加如下代码，主目录里面没有该文件或者文件中是空的话，可以直接把ender-link.html从theme中复制过来 1 2 3 4 5 6 7 8 {{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} \u0026lt;span style=\u0026#34;white-space: nowrap;\u0026#34;\u0026gt;\u0026lt;svg width=\u0026#34;.7em\u0026#34; height=\u0026#34;.7em\u0026#34; viewBox=\u0026#34;0 0 21 21\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\u0026#34; fill=\u0026#34;currentColor\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;/svg\u0026gt;\u0026lt;/span\u0026gt; {{ end }} 引入动态背景 点击展开 首先前往particles.js配置页面 配置参数，参数按自己喜好即可，唯一注意要修改的参数是 detect_on，要改成 window\n其次下载2个文件，即配置文件，以及 particles.js所需要的js文件（如图）\n接着把下载好的文件，解压并将以下两个文件放到assets/background文件夹下\n最后在layouts/partials/footer/custom.html中，引入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;particles-js\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src={{ (resources.Get \u0026#34;background/particles.min.js\u0026#34;).Permalink }}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; particlesJS.load(\u0026#39;particles-js\u0026#39;, {{ (resources.Get \u0026#34;background/particlesjs-config.json\u0026#34;).Permalink }}, function() { console.log(\u0026#39;particles.js loaded - callback\u0026#39;); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #particles-js { position: fixed; top: 0; left: 0; width: 100%; z-index: -1; } \u0026lt;/style\u0026gt; 显示文章更新时间 点击展开 在配置文件 hugo.yaml 中加入以下配置，这样文章的更新时间就会出现在文章底部 1 2 3 4 5 6 7 8 # 更新时间：优先读取git时间 -\u0026gt; git时间不存在，就读取本地文件修改时间 frontmatter: lastmod: - :git - :fileModTime # 允许获取Git信息\tenableGitInfo: true 若想在文章开头就显示更新时间，则修改layouts/partials/article/components/detail.html，删掉原代码，复制粘贴以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; {{ if .Params.categories }} \u0026lt;header class=\u0026#34;article-category\u0026#34;\u0026gt; {{ range (.GetTerms \u0026#34;categories\u0026#34;) }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34; {{ with .Params.style }}style=\u0026#34;background-color: {{ .background }}; color: {{ .color }};\u0026#34;{{ end }}\u0026gt; {{ .LinkTitle }} \u0026lt;/a\u0026gt; {{ end }} \u0026lt;/header\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;article-title-wrapper\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; {{- .Title -}} \u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; {{ with .Params.description }} \u0026lt;h3 class=\u0026#34;article-subtitle\u0026#34;\u0026gt; {{ . }} \u0026lt;/h3\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ $showReadingTime := .Params.readingTime | default (.Site.Params.article.readingTime) }} {{ $showDate := not .Date.IsZero }} {{ $showFooter := or $showDate $showReadingTime }} {{ if $showFooter }} \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; \u0026lt;!-- 更新时间 --\u0026gt; {{- if ne .Lastmod .Date -}} \u0026lt;div class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time\u0026gt; {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} {{ if $showDate }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;date\u0026#34; }} \u0026lt;time class=\u0026#34;article-time--published\u0026#34;\u0026gt; {{- .Date | time.Format (or .Site.Params.dateFormat.published \u0026#34;Jan 02, 2006\u0026#34;) -}} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ if $showReadingTime }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time class=\u0026#34;article-time--reading\u0026#34;\u0026gt; {{ T \u0026#34;article.readingTime\u0026#34; .ReadingTime }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/footer\u0026gt; {{ end }} {{ if .IsTranslated }} \u0026lt;footer class=\u0026#34;article-translations\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;language\u0026#34; }} \u0026lt;div\u0026gt; {{ range .Translations }} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; class=\u0026#34;link\u0026#34;\u0026gt;{{ .Language.LanguageName }}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; {{ end }} \u0026lt;/div\u0026gt; 首页欢迎横幅 点击展开 \u0026ldquo;打开layouts/index.html，在\u0026lt;section class=article-list\u0026gt;前添加以下代码\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- 首页欢迎字幅 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 2rem; text-align: center; font-weight: bold\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;👋\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34; \u0026gt; Welcome\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34;\u0026gt; To \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Xa\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;l\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;a\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text6\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;o\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text7\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;k\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text8\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;\u0026#39;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text9\u0026#34; style=\u0026#34;color:#e99312\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 首页欢迎字幅 --\u0026gt; 在 assets/scss/custom.scss 中加入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 //首页欢迎板块样式 .welcome { color: var(--card-text-color-main); background: var(--card-background); box-shadow: var(--shadow-l2); border-radius: 30px; display: inline-block; } // 👋emoji实现摆动效果 .shake { display: inline-block; animation: shake 1s; animation-duration: 1s; animation-timing-function: ease; animation-delay: 0s; animation-iteration-count: 1; animation-direction: normal; animation-fill-mode: none; animation-play-state: running; animation-name: shake; animation-timeline: auto; animation-range-start: normal; animation-range-end: normal; animation-delay: 2s; @keyframes shake { 0% { transform: rotate(0); } 25% { transform: rotate(45deg) scale(1.2); } 50% { transform: rotate(0) scale(1.2); } 75% { transform: rotate(45deg) scale(1.2); } 100% { transform: rotate(0); } } } // 实现字符跳动动画 .jump-text1 { display: inline-block; animation: jump 0.5s 1; } .jump-text2 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.1s; } .jump-text3 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.2s; } .jump-text4 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.3s; } .jump-text5 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.4s; } .jump-text6 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.5s; } .jump-text7 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.6s; } .jump-text8 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.7s; } .jump-text9 { display: inline-block; animation: jump 0.5s 1; animation-delay: 0.9s; } @keyframes jump { 0% { transform: translateY(0); } 50% { transform: translateY(-20px); } 100% { transform: translateY(0); } } 修改总体布局 对照原代码，在 /assets/scss/grid.scss 中修改 left-sidebar 和 right-sidebar 的描述 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .left-sidebar { order: -3; // max-width: var(--left-sidebar-max-width); max-width: 10%; } .right-sidebar { order: -1; // max-width: var(--right-sidebar-max-width); max-width: 20%; /// Display right sidebar when min-width: lg @include respond(lg) { display: flex; } } // 把正文的占比改到了 70%, 原来的只有 50% 左右 头像旋转 在 /assets/scss/custom.scss 中加入以下代码 1 2 3 4 5 6 7 8 // 头像旋转动画 .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; // 旋转时间 } .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); // 旋转角度为360度 } 多图排版 增添到 assets/scss/partials/layout/article.scss，文章里输入 md 图片语法换行但不空行即可 1 2 3 4 5 6 7 .article-content p:has(\u0026gt; img:nth-child(2)){column-count:2;column-gap:8px;margin:6px 0;} .article-content p:has(\u0026gt; img:nth-child(3)){column-count:3;} .article-content p:has(\u0026gt; img:nth-child(4)){column-count:4;} .article-content p:has(\u0026gt; img:nth-child(5)){column-count:5;} .article-content p:has(\u0026gt; img:nth-child(6)){column-count:4;} .article-content p:has(\u0026gt; img:nth-child(2)) img{display:flex;} .article-content p:has(\u0026gt; img:nth-child(6)) img{margin-bottom:8px;} “博客已运行x天x小时x分钟”字样 展开代码 在layouts/partials/footer/custom.html里添加以下JS代码，其中s1是网站创建日期。代码参考自这里 ，我加上了小时和分钟的计算。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;script\u0026gt; let s1 = \u0026#39;2023-3-18\u0026#39;; //website start date s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); let s2 = new Date(); let timeDifference = s2.getTime() - s1.getTime(); let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); let result = days + \u0026#34;天\u0026#34; + hours + \u0026#34;小时\u0026#34; + minutes + \u0026#34;分钟\u0026#34;; document.getElementById(\u0026#39;runningdays\u0026#39;).innerHTML = result; \u0026lt;/script\u0026gt; 再在layouts/partials/footer/footer.html里添加以下代码：\n1 2 3 4 5 \u0026lt;!-- Add blog running time --\u0026gt; \u0026lt;section class=\u0026#34;running-time\u0026#34;\u0026gt; 本博客已稳定运行 \u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; 在assets/scss/partials/footer.scss里添加风格样式，这里我单独把计时的部分加粗，并改了颜色。\n1 2 3 4 5 6 7 8 9 .running-time { color: var(--card-text-color-secondary); font-weight: normal; .running-days { font-weight:bold; color: var(--emphasize-text-color); } } 总字数统计：“发表了x篇文章，共计x字” 点击展开代码 在layouts/partials/footer/footer.html里增加以下代码，其中文章篇数统计参考了这篇 ，字数统计的展示方式参考了小球飞鱼的博客 。\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- Add total page and word count time --\u0026gt; \u0026lt;section class=\u0026#34;totalcount\u0026#34;\u0026gt; {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} 发表了{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 · 总计{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k字 \u0026lt;/section\u0026gt; 在assets/scss/partials/footer.scss里修改风格：\n1 2 3 4 5 .totalcount { color: var(--card-text-color-secondary); font-weight: normal; margin-bottom: 5px; } 旅行者 1 号离地球距离 点击展开代码 在layouts/partials/footer/footer.html里增加以下代码 1 2 3 4 \u0026lt;!-- 旅行者 1 号离地球距离 --\u0026gt; \u0026lt;section class=\u0026#34;voyager\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;voyager\u0026#34;\u0026gt;载入旅行者一号离地球距离信息...\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; 在layouts/partials/footer/custom.html里添加以下JS代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;script language=\u0026#34;javascript\u0026#34;\u0026gt; var now = new Date(); function createtime(){ // 当前时间 now.setTime(now.getTime()+250); var grt= new Date(\u0026#34;20xx/xx/xx 00:00:00\u0026#34;); //网站诞生时间 days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 ){hnum = \u0026#34;0\u0026#34; + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \u0026#34;0\u0026#34; + mnum;} seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \u0026#34;0\u0026#34; + snum;} document.getElementById(\u0026#34;timeDate\u0026#34;).innerHTML = \u0026#34;本站已稳定运行\u0026#34;+dnum+\u0026#34; 天 \u0026#34;; document.getElementById(\u0026#34;times\u0026#34;).innerHTML = hnum + \u0026#34; 小时 \u0026#34; + mnum + \u0026#34; 分 \u0026#34; + snum + \u0026#34; 秒\u0026#34; } setInterval(\u0026#34;createtime()\u0026#34;,250); \u0026lt;/script\u0026gt; 修改背景色 点击展开代码，在assets\\scss\\variables.scss中对颜色代码进行修改，附 颜色查询网站 1 --body-background: #f5f5f5; 新增一个随笔页面并实现加密功能 点击展开代码 在content/page/目录下新建一个musings文件夹，然后在里面新建index.md文件，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 --- title: \u0026#34;随笔\u0026#34; date: 2023-09-08 layout: \u0026#34;musings\u0026#34; slug: \u0026#34;musings\u0026#34; menu: main: weight: 4 params: icon: note --- 在layouts/_default目录下新建一个musings.html文件，以实现查找并显示tag为musings的文章，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 {{ define \u0026#34;body-class\u0026#34; }}template-archives{{ end }} {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1 class=\u0026#34;big-title\u0026#34; style=\u0026#34;color: white;\u0026#34;\u0026gt;随笔\u0026lt;/h1\u0026gt; {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ range $filtered.GroupByDate \u0026#34;2006\u0026#34; }} {{ $id := lower (replace .Key \u0026#34; \u0026#34; \u0026#34;-\u0026#34;) }} \u0026lt;div class=\u0026#34;archives-group\u0026#34; id=\u0026#34;{{ $id }}\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;archives-date section-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $.RelPermalink }}#{{ $id }}\u0026#34;\u0026gt;{{ .Key }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;article-list--compact\u0026#34;\u0026gt; {{ range .Pages }} {{ if in .Params.tags \u0026#34;musings\u0026#34; }} \u0026lt;article\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- .Title -}} \u0026lt;/h2\u0026gt; \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; \u0026lt;time datetime=\u0026#39;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z07:00\u0026#34; }}\u0026#39;\u0026gt; {{- .Date.Format (or .Site.Params.dateFormat.published \u0026#34;Jan 02, 2006\u0026#34;) -}} \u0026lt;/time\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; {{- $image := partialCached \u0026#34;helper/image\u0026#34; (dict \u0026#34;Context\u0026#34; . \u0026#34;Type\u0026#34; \u0026#34;articleList\u0026#34;) .RelPermalink \u0026#34;articleList\u0026#34; -}} {{ if $image.exists }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; {{ if $image.resource }} {{- $Permalink := $image.resource.RelPermalink -}} {{- $Width := $image.resource.Width -}} {{- $Height := $image.resource.Height -}} {{- if (default true .Page.Site.Params.imageProcessing.cover.enabled) -}} {{- $thumbnail := $image.resource.Fill \u0026#34;120x120\u0026#34; -}} {{- $Permalink = $thumbnail.RelPermalink -}} {{- $Width = $thumbnail.Width -}} {{- $Height = $thumbnail.Height -}} {{- end -}} \u0026lt;img src=\u0026#34;{{ $Permalink }}\u0026#34; width=\u0026#34;{{ $Width }}\u0026#34; height=\u0026#34;{{ $Height }}\u0026#34; alt=\u0026#34;{{ .Title }}\u0026#34; loading=\u0026#34;lazy\u0026#34;\u0026gt; {{ else }} \u0026lt;img src=\u0026#34;{{ $image.permalink }}\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Featured image of post {{ .Title }}\u0026#34; /\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ partialCached \u0026#34;footer/footer\u0026#34; . }} {{ end }} 在layouts\\partials\\article\\article.html中添加以下代码，可能在原.html中会有部分已经存在的代码，记得删去\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 {{ if isset .Params \u0026#34;password\u0026#34; }} \u0026lt;div id=\u0026#34;password-protected-content\u0026#34; style=\u0026#34;border: 1px solid #ccc; padding: 10px; border-radius: 5px; background-color: #f9f9f9; text-align: center;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 16px; margin-bottom: 10px;\u0026#34;\u0026gt;{{ with .Params.passwordPoint }}{{ . }}{{ else }}这是密码保护的内容，请输入密码访问：{{ end }}\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;password-input\u0026#34; style=\u0026#34;padding: 5px; margin-bottom: 10px; width: 200px;\u0026#34;\u0026gt; \u0026lt;button onclick=\u0026#34;verifyPassword()\u0026#34; style=\u0026#34;padding: 5px 10px; background-color: #007bff; color: #fff; border: none; border-radius: 3px; cursor: pointer;\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;article-content\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; \u0026lt;article class=\u0026#34;{{ if .Params.image }}has-image {{ end }}main-article\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/header\u0026#34; . }} \u0026lt;!-- 以下部分仅在密码验证通过后显示 --\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/content\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;!-- End of password-protected content --\u0026gt; {{ partial \u0026#34;article/components/footer\u0026#34; . }} {{ if or .Params.math .Site.Params.article.math }} {{ partialCached \u0026#34;article/components/math.html\u0026#34; . }} {{ end }} \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; {{ else }} \u0026lt;div id=\u0026#34;article-content\u0026#34;\u0026gt; \u0026lt;article class=\u0026#34;{{ if .Params.image }}has-image {{ end }}main-article\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/header\u0026#34; . }} {{ partial \u0026#34;article/components/content\u0026#34; . }} {{ partial \u0026#34;article/components/footer\u0026#34; . }} {{ if or .Params.math .Site.Params.article.math }} {{ partialCached \u0026#34;article/components/math.html\u0026#34; . }} {{ end }} \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;script\u0026gt; function verifyPassword() { var inputPassword = document.getElementById(\u0026#39;password-input\u0026#39;).value; var correctPassword = \u0026#39;{{ with .Params.password }}{{ . }}{{ else }}{{ \u0026#34;\u0026#34; }}{{ end }}\u0026#39;; // 获取文章 Front Matter 中定义的密码 if (inputPassword === correctPassword) { document.getElementById(\u0026#39;password-protected-content\u0026#39;).style.display = \u0026#39;none\u0026#39;; // 隐藏密码输入框 document.getElementById(\u0026#39;article-content\u0026#39;).style.display = \u0026#39;block\u0026#39;; // 显示文章内容 } else { alert(\u0026#39;密码错误，请重新输入！\u0026#39;); } } \u0026lt;/script\u0026gt; 要写随笔并要设置密码时，在.md文件的开头添加如下字段即可，将您的安全密码设置为想设置的实际密码，另一个不用动\n1 2 3 4 --- password: \u0026#34;您的安全密码\u0026#34; passwordPoint: \u0026#34;请正确输入密码！\u0026#34; --- 缩小归档页的分类卡片尺寸 点击展开，对照原代码，加以修改 1 2 3 4 5 6 7 8 9 .article-list--tile { display: flex; padding-bottom: 0px; // Narrow the spacing article { width: 150px; // Make category cards smaller height: 90px; margin-right: 5px; // Make cards spacing narrower flex-shrink: 0; 将友链设置为三栏 在 assets/scss/custom.scss 里加上以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @media (min-width: 1024px) { .article-list--extra-compact.links { display: grid; grid-template-columns: 1fr 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: var(--card-border-radius); \u0026amp;:nth-child(odd) { margin-right: 8px; } } } } 固定块的高度 过长的内容影响观感，所以把 block 的高度限制在 20em，并隐藏滚动条，在 /assets/scss/partials/layout/article.scss 中进行如下修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .highlight { background-color: var(--pre-background-color); position: relative; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; max-height: 20em; scrollbar-width: none; \u0026amp;::-webkit-scrollbar { display: none; } } } 代码块基础样式修改 在 /assets/scss/custom.scss 中加入以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // 代码块基础样式修改 .highlight { max-width: 102% !important; background-color: var(--pre-background-color); padding: var(--card-padding); position: relative; border-radius: 20px; margin-left: -7px !important; margin-right: -12px; box-shadow: var(--shadow-l1) !important; \u0026amp;:hover { .copyCodeButton { opacity: 1; } } // keep Codeblocks LTR [dir=\u0026#34;rtl\u0026#34;] \u0026amp; { direction: ltr; } pre { margin: initial; padding: 0; margin: 0; width: auto; } } 移动端目录按钮 替换 layouts/partials/widget/toc.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 {{ if (.Context.Scratch.Get \u0026#34;TOCEnabled\u0026#34;) }} \u0026lt;!-- 如果 .Context.Scratch 中包含名为 \u0026#34;TOCEnabled\u0026#34; 的值，则执行以下代码 --\u0026gt; \u0026lt;button id=\u0026#34;toggle-toc\u0026#34;\u0026gt;Toc\u0026lt;/button\u0026gt; \u0026lt;!-- 创建一个按钮，用于展开和收起目录 --\u0026gt; \u0026lt;section class=\u0026#34;widget archives\u0026#34; id=\u0026#34;toc-container\u0026#34;\u0026gt; \u0026lt;!-- 创建一个带有 \u0026#34;archives\u0026#34; 类的区块，并添加一个唯一的 ID 用于操作 --\u0026gt; \u0026lt;h2 class=\u0026#34;widget-title section-title\u0026#34;\u0026gt;{{ T \u0026#34;article.tableOfContents\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;!-- 创建一个带有 \u0026#34;widget-title\u0026#34; 和 \u0026#34;section-title\u0026#34; 类的标题区块，并显示 \u0026#34;article.tableOfContents\u0026#34; 的本地化内容 --\u0026gt; \u0026lt;div class=\u0026#34;widget--toc\u0026#34;\u0026gt; \u0026lt;!-- 创建一个带有 \u0026#34;widget--toc\u0026#34; 类的目录区块 --\u0026gt; {{ .Context.TableOfContents }} \u0026lt;!-- 显示文章的目录内容 --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{ end }} \u0026lt;style\u0026gt; #mulu { z-index: 9999; } #toc-container { display: none; /* 初始时隐藏目录 */ position: fixed; /* 使用固定定位，使其固定在视口中 */ bottom: 21%; /* 距离视口顶部的距离，可以根据需要进行调整 */ right: 60px; /* 距离视口右侧的距离，可以根据需要进行调整 */ background-color: var(--card-background); /* 可选：设置背景颜色 */ padding: 10px; /* 可选：添加一些内边距 */ border: 1px solid #96979a50; border-radius: var(--card-border-radius); box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px; /* 可选：添加边框样式 */ z-index: 9998 !important; /* 可选：设置 z-index 以确保它显示在其他元素之上 */ max-height: 80vh; /* 设置最大高度为视口高度的 80% */ overflow-y: auto; /* 添加垂直滚动条，以便在内容溢出时滚动 */ width: auto; /* 让容器的宽度自适应内容 */ max-width: 290px; } #toggle-toc { position: fixed; bottom: 22%; right: 20px; padding: 10px 10px; z-index: 9998 !important; border: 0px solid #96979a50; border-radius: 7px; box-shadow: var(--shadow-l1); background-color: #00640010; color: #34495e; /* 确保按钮在其他元素之上 */ /* 其他样式保持不变 */ display: block; /* 显示按钮 */ margin-bottom: 10px; cursor: pointer; font-size: 1.2rem; /* 可选：改变鼠标光标以指示按钮是可点击的 */ } .widget--toc #TableOfContents { overflow-x: auto; max-height: 66vh; width: auto; } @media screen and (max-width: 768px) { #toggle-toc { bottom: 100px; } } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; // 获取按钮和目录的元素 var toggleButton = document.getElementById(\u0026#39;toggle-toc\u0026#39;); var tocContainer = document.getElementById(\u0026#39;toc-container\u0026#39;); var scrollThreshold = 200; // 设置滚动显示的阈值 // 监听页面滚动事件 window.addEventListener(\u0026#39;scroll\u0026#39;, function() { // 获取当前滚动位置 var scrollY = window.scrollY || window.pageYOffset; // 检查滚动位置是否超过阈值 if (scrollY \u0026gt;= scrollThreshold) { // 显示按钮 toggleButton.style.display = \u0026#39;block\u0026#39;; } else { // 隐藏按钮 toggleButton.style.display = \u0026#39;none\u0026#39;; } }); // 添加点击事件处理程序 toggleButton.addEventListener(\u0026#39;click\u0026#39;, function() { // 切换目录的显示状态 if (tocContainer.style.display === \u0026#39;none\u0026#39; || tocContainer.style.display === \u0026#39;\u0026#39;) { tocContainer.style.display = \u0026#39;block\u0026#39;; } else { tocContainer.style.display = \u0026#39;none\u0026#39;; } }); // 当鼠标悬浮在按钮上时显示目录 toggleButton.addEventListener(\u0026#39;mouseover\u0026#39;, function() { tocContainer.style.display = \u0026#39;block\u0026#39;; }); // 添加点击页面空白处的事件处理程序 document.addEventListener(\u0026#39;click\u0026#39;, function(event) { // 检查点击事件是否发生在目录容器之外，并且不是按钮本身 if (!tocContainer.contains(event.target) \u0026amp;\u0026amp; event.target !== toggleButton) { // 点击发生在目录容器之外，隐藏目录容器 tocContainer.style.display = \u0026#39;none\u0026#39;; } }); \u0026lt;/script\u0026gt; ","date":"2024-11-14T22:47:32+08:00","image":"https://imgbed.worhllo.us.kg/file/1731767487341_fghffx.png","permalink":"https://worhllo.github.io/hugo-dev/p/stack%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%A4%A7%E6%9D%82%E7%83%A9/","title":"stack主题美化大杂烩"},{"content":"初步介绍 本项目是 Telegraph-Image 的重制版，\n项目图片存储在 telegraph 的服务器上，支持图片审查 API，可自动屏蔽不良图片； 项目由 cloudflare 提供全球 cdn 服务，基于 cloudflare pages 执行，可自定义域名； 项目支持身份认证和多种上传方式（拖拽，选择文件，粘贴等），图片突破 5mb 的上传限制； 项目的自定义程度极高，可自定义页面，网站名称与 logo，过渡动画流畅丝滑 作者博客（点击跳转） 前端仓库（点击跳转） 项目仓库（点击跳转） 界面一览 正式实操 环境部署 部署此项目首先要求你拥有一个 GitHub 账号（点击跳转） ，一个 cloudflare 账号（点击跳转） ，一个属于自己的域名以及一个 Telegram 账号\nTelegram 配置 １．获取 TG_BOT_TOKEN 登陆telegram ，在搜索框中搜索 @BotFather.bat （注意甄别，千万别点错了）\n打开对话界面，点击 开始然后按图示进行配置，得到TOKEN后复制保存备用\n２．获取 TG_CHAT_ID（频道 ID） 在 telegram 中 打开左侧的二级菜单，打开新建频道（Manage Channel），频道名字任意，后面内容可以直接跳过。\n完成创建后找到管理频道，在菜单中找到 管理员（Administrators），菜单中点击 添加管理员，将刚才创建的机器人（你命名的那个机器人）也设为管理员（注意搜索时要 @刚才设置的用户名 别填加错了），权限默认即可。\n完成后首页搜索 @VersaToolsBot，回复/start然后在你刚才创建的频道里随便发一条消息，并将消息转发到 @VersaToolsBot，接着就会得到我们需要的ID，复制保存备用。\ncloudflare 配置 首先打开该项目仓库（点击跳转） ，点击 Fork，跳转页面后不需要任何改动，直接点击 Create fork”即可\n成功创建 fork 后来到 登录cloudflare 账号，打开仪表盘，点击侧边栏中的 Workers和 Pages，点击上方的 创建，选到 Pages一栏，点击 连接到 Git\n在打开的第一个页面点击 连接到 GitHub，随后会跳转到 GitHub 进行授权，选到 All repositories\n完成授权后会回到cloudflare，找到选择存储库的界面，选择刚才 fork 的仓库后点击 开始设置，跳转页面后直接划到下面点击 保存并部署即可，出现下图即部署完成，点击 继续处理项目\n1．设置认证码与后台管理的账号密码 点击 自定义域， 添加一个你自己的域名，点击左侧栏中的 KV，点击 创建命名空间， 名称为 img_url点击 添加\n完成添加后回到 page 的界面，点击 设置 后点击 变量与机密，找到 绑定 一栏，点击 添加 ，在弹出的页面中找到 KV 命名空间，变量名称填写 img_url，KV 命名空间 选择刚才创建的 KV img_url完成后点击保存\n在绑定的上面找到 变量与机密一栏，点击右侧的 添加，添加 环境变量，常用环境变量如下表，按需要添加\n变量名称 作用 是否推荐 TG_CHAT_ID telegram 频道 ID 必须 TG_BOT_TOKEN telegram 机器人 token 必须 BASIC_USER 后台管理的账户名 推荐 BASIC_PASS 后台管理的密码 推荐 AUTH_CODE 前台的认证码 强烈推荐 ModerateContentApiKey 前台的认证码 ALLOWED_DOMAINS 防盗链 访问域名限制 多个允许的域名用英文 , 分割，如：域名.com,域名2.top AllowRandom 随机图 api 的前置，后面会讲到 完成后点击保存， 然后重新部署（所有关于环境变量和 kv 绑定的修改都要重新部署一遍），选到 部署一栏， 在 所有部署下面找到你最新的部署（就是最上面的那一个），鼠标点击在右侧三个点，在弹出的菜单中选择 重新部署，等待部署完成后即可使用\n2．内容审查ａｐｉ 打开 moderatecontent 官网（点击跳转） ，注册账号后获取到你的 api ，在环境变量中添加一条 ModerateContentApiKey，值就是你获取的 api，保存后别忘了重新部署一遍\n3．随机图ａｐｉ 在设置好环境变量后访问 https://your.domain/random 本文出处 完全免费，图文教程手把手教你使用cloudflare搭建一个无限空间的私人图床，支持身份认证与成人元素鉴定 保姆级教程：使用Cloudflare+Telegraph搭建零成本图床系统 - 胡萝虎的博客 (huluohu.com) ","date":"2024-11-12T19:14:04+08:00","image":"https://imgbed.worhllo.us.kg/file/1731733156524_ggfdg.png","permalink":"https://worhllo.github.io/hugo-dev/p/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E7%A9%BA%E9%97%B4%E6%94%AF%E6%8C%81%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%9A%84%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A/","title":"免费搭建无限空间＆支持身份认证的私人图床"},{"content":"什么是Win+R，有何优点 防止有些小白看不懂，所以说明一些，使用Windows+R快捷键就可以打开如下图的运行窗口，在里面输入命令可以方便快捷地打开很多东西，而且本文的所有操作都是在这个运行框里输入的，不要与cmd弄混了。\n1.可用于实现快速启动软件，打开文件夹/网站\n2.可用于实现网站批量搜索\n3.可用于实现一键下载视频\n4.搭配同步盘轻松实现多台电脑配置同步\n5.无需额外安装软件\n6.没有兼容性问题，全Windows.系统通用\n7.优先级高，可在任何界面呼出\n8.完全免费，没有任何限制\n9.有利于电脑桌面整洁\n# 如何设置 1.配置环境变量 首先需要创建一个文件夹，用于存放包括软件但不限于软件快捷方式、bat文件等文件，然后复制文件夹的路径\n将这个文件夹设置到系统环境变量中，搜索栏输入高级系统设置来直达设置页面\n找到系统变量中的Path变量，点击编辑，点击新建，然后将之前复制的文件夹路径粘贴进去，至此，最重要的地基已经搭建完成，现在可以开始搭建高楼了\n2.快速启动软件（快捷方式）等 如图，本人设置的文件夹路径为D:\\win＋R，那就只需要把你想快速启动的软件、快捷方式（放进该文件夹内的文件都可以任意命名，尽量简短易记）都放到这个文件夹里面去，然后你的电脑桌面就可以不放任何软件的快捷方式了，有想要启动的软件，你只需要按下键盘上的WIN+R键，接着输入你想启动的软件的对应名，最后按下回车即可\n各个软件快捷方式的名称推荐两种方式来命名：\n可以用缩写：比如说Photoshop可以改为ps、MuMu模拟器改为mumu等 可以直接根据需求：如可以把QQ音乐直接命名为听歌、 Steam命名为游戏等 3.快速打开网站 先新建一个文本文档，在文档中输入以下内容https://worhllo.github.io/hugo-dev/是你想设置的网址链接（可设置多个网站链接），请自定义设置。然后把文本文档的后缀名从txt改为.bat,文件名自定义设置，接着把这个.bat文件放到你的快速启动文件夹中，然后只需要WIN+R唤起运行窗口，再输入定义好的名字，就能快速打开网站了。后续如果想对.bat文件进行修改，直接右键.bat文件，选择编辑即可\n1 2 3 @echo off # 使用默认浏览器打开URL地址 start https://worhllo.github.io/hugo-dev/ 4.多网站批量搜索 在实现批量搜索之前，你必须得了解搜索串是什么。比如说我用bing.com搜索一下吾爱破解然后在地址栏中可以看到如下链接：https://cn.bing.com/search?q=吾爱破解\u0026amp;cvid，其中的关键部分是：https://cn.bing.com/search?q= 吾爱破解则是传递进这个搜索引擎的关键词，而后面的\u0026amp;cvid则可有可无， 有些时候链接后面会带上更多的参数，你可以自己一点点删掉。删掉之后回车访问一下，如果还能正常访问，说明这些就属于多余的参数，都可以删掉\n而实现批量搜索的方法其实很简单，和就是在批量打开网站的基础上，在搜索串后 面加上参数%1比如下面就是同时在百度、必应、Yandex.上进行搜索的代码：\n1 2 3 4 @echo off start explorer.exe \u0026#34;https://www.baidu.com/s?wd=%1+2+%3+%4+%5+%6+%7+%8+%9\u0026#34; start explorer.exe \u0026#34;https://cn.bing.com/search?q=%1+%2+%3+%4+%5+%6+%7+%8+%9\u0026#34; start explorer.exe \u0026#34;https://yandex.com/search/?text=%1+%2+%3+%4+%5+%6+%7+%8+%9\u0026#34; 之后我只需要用WIN+R唤起运行窗口，依次输入：定义好的名字\u0026mdash;-空格\u0026mdash;-想要搜索的关键词，然后敲下回车，即可轻松进行批量搜索了\n这里只得解释一下代码中提到的%1,%2,%3，它表示传入搜索串中的参数，而这个参数最多你可以传递9个，这个参数可多不可少，（即搜索串后面只有一个%1)，那在运行窗口时，你就只能输入一个完整的搜索关键词，而如果你的搜索串中传了多个参数，那么在运行窗口中就可以输入多个关键词，不过注意每个关键词之间要有一个空格，同时最多能传入9个关键词。\n5.本文出处 私认Windows最强效率神器：WIN+R的独家使用心得！（全网最全） ","date":"2024-11-12T11:11:59+08:00","image":"https://imgbed.worhllo.us.kg/file/1731733096451_fsadadesff.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/win-r%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BA%94%E7%94%A8/","title":"Win+R自动化应用"},{"content":"环境准备 下载Hugo 网址：Hugo官网 Github地址:gohugoio/hugo 选择合适的版本下载。 下载git 点击Git官网 点击 Download for Windows 按照指引 安装即可。\n搭建博客 创建Blog 解压hugo_extended_0.134.2_windows-amd64.zip文件，在dev文件夹下进入cmd命令窗口（全选文件路径，输入cmd后回车），输入hugo new site xxxx创建文件（xxx任意命名，此处以dev为例），代码输入无误之后就会生成一个你命名的文件夹。（注意不要急着关闭cmd命令窗口，后面接着要用到）\n再次打开cmd命令窗口，输入cd dev\n将上图页面中的hugo.exe文件复制到dev文件内。\n在cmd命令行中输入hugo server -D，运行成功后会出现以下界面：\n此时，在浏览器中输入命令窗口中出现的链接，即http://localhost:1313/，如果操作无误，则会提示Page Not Found\n下载主题 再次进入Hugo官网 。\n点击Themes选择一款适合的主题，这里以Stack这款主题为例。\n点击Download，下滑至Assets界面，并选择适当的版本，将源码下载下来。\n将文件解压，将其命名为hugo-theme-stack，移动至dev\\themes文件下，接着打开exampleSite文件夹，复制其中的 Content 和 hugo.yaml 复制到主文件夹dev中，然后删掉hugo.toml。\n再次打开cmd命令窗口，输入hugo server -D，打开浏览器输入http://localhost:1313/，若操作无误则主题会正常显示，并出现出相关范例文章。\nGithub部署 常规部署 前提条件：拥有一个属于自己的github账号，没有请自行注册。\n新建仓库，命名任意，但是最好命名为xxx(你的gitub用户名).github.io，（后续生成的链接短，访问博客很方便）选择Public，最后点击Creat respository\n进入到刚创建好的仓库后，前往setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，点击Save，等待一会儿，就会出现https://{github用户名}.github.io 的地址，该地址即为博客的访问地址。\n此时，原来的cmd命令窗口终于能关掉了，接着，在public文件夹（跟之前不一样了，注意）下进入cmd命令窗口，依次以下命令，操作无误后刷新新建仓库，就会发现文件都上传到github仓库上面了。至此，hugo博客的基本搭建已经结束。\ncmd命令 git init git add . git commit -m \u0026quot;first commit\u0026quot; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main Github Action自动部署 ​ Github Actions是Github上一个类似于持续集成的功能，它允许你在一些节点上（如提交代码，特定时间等）触发一些操作，用到博客上之后，每次只需要在cmd命令行中提交3行简单代码， 就能实现上文将publish上传至github的繁琐操作，实现自动部署。\n在Github上面再次新建一个仓库，用于存放Hugo的主文件，名称任意设置，安全起见，建议将状态设置为private，接着点击Creat respository\n前往settings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)。\ntoken选择永不过期，并且勾选repo和workflow选项，最后点击generate，复制生成的token（只会显示一次，注意保存）\n为保证安全，可以将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置，任意命名，粘贴生成的token。\n回到hugo主文件dev，创建一个.github/workflows/xxxx.yaml文件，将下面的代码复制至xxxx.yaml文件中。（若出现必须键入文件名的提示，方法如下）\n1 2 3 4 5 6 解决方法 1、首先创建一个123.github的文件 2、在该文件所在目录上打开cmd命令窗口，输入rename 123.github .gitub 3、点击回车即可完成修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 接着在hugo主文件dev中创建.gitignore文件，来避免提交不必要的文件（不需要hugo.exe，public，resources，.hugo_build.lock），文件内容如下\n在dev文件夹（又不一样了，注意）下进入cmd命令窗口，依次输入以下命令，操作无误后刷新，就会发现大部分文件都上传到github仓库上面了（不必要的文件上一步已经排除掉了）至此，hugo博客的自动部署也已经结束。\ncmd命令 git init git add . git commit -m \u0026quot;first commit\u0026quot; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 后续新文章写作与上传 后续撰写新文章的话，按三步走就能实现本地撰写和线上同步\n在dev文件夹下进入cmd命令窗口,输入hugo new content post/xxxx/index.md（xxx名字自定)\n在新创建的文件夹中会有index.md文件，在该文件中撰写文章\n在dev文件夹下再次进入cmd命令窗口，依次输入以下命令即可\ncmd命令 git add . git commit -m \u0026quot;update\u0026quot; git push 当然，为了更加方便快捷，你可以利用.bat批处理文件完成以上操作，具体教程如下 分别创建两个.bat文件，代码分别如下 输入文章标题并创建文章 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 @echo off echo 【创建文章】 set /p input= 请输入Slug: echo 正在切换到 D:\\hugo\\dev 目录... cd /d D:\\hugo\\dev echo 请按回车键继续... pause echo. echo 执行 hugo new post/%input%/index.md hugo new post/%input%/index.md echo 完成！请按回车退出... pause 上传至github实现同步 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @echo off echo 正在切换到 D:\\hugo\\dev 目录... cd /d D:\\hugo\\dev echo 请按回车键继续... pause echo. echo 第一步：执行 git add . git add . echo 请按回车键继续... pause echo. echo 第二步：执行 git commit -m \u0026#34;update\u0026#34; git commit -m \u0026#34;update\u0026#34; echo 请按回车键继续... pause echo. echo 第三步：执行 git push git push echo 完成！请按回车退出... pause ","date":"2024-11-11T13:12:41+08:00","image":"https://imgbed.worhllo.us.kg/file/1731733015199_12123.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/hugo-github%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/","title":"Hugo+Github博客部署"},{"content":" Markdown语法介绍 一、标题 三号 四号 五号标题 六号标题【最低】 二、分割线 *号分割线 -分割线 三、粗体斜体 斜体\n粗体\n删除线\n四、超链接和图片 超链接,方法1 超链接,方法2 五、无序列表 a b b C V B 六、有序列表 a b c c 七、文字引用 使用 \u0026gt; 表示，可以有多个 \u0026gt; 表示层级更深 第一层\n第二层 这样跳不下去\n还可更深\n这样就跳出去了\n八、行内代码 其实上边已经用过很多次，即使用 ` 表示\n这是行内代码 中间可以换行\n九、代码块 1 2 ​```代码段``` import os 十、表格 商品name price num 靠左 靠右 3 3 4 2 十一、流程图 解释一下这个例子：\nmermaid是Mermaid语言的标记。\ngraph TD;指定了图的类型和方向，这里是从上到下（Top Down）的有向图（Directed Graph）。\nA--\u0026gt;B;和A--\u0026gt;C;表示两个箭头从A出发分别指向B和C。\nB--\u0026gt;D;和C--\u0026gt;D;表示两个箭头从B和C出发分别指向D。\nmermaid graph TD A(工业用地效率)\u0026ndash;\u0026gt;B1(土地利用强度) A\u0026ndash;\u0026gt;B2(土地经济效益) B1\u0026ndash;\u0026gt;C1(容积率) B1\u0026ndash;\u0026gt;C2(建筑系数) B1\u0026ndash;\u0026gt;C3(亩均固定资本投入) B2\u0026ndash;\u0026gt;D1(亩均工业产值) B2\u0026ndash;\u0026gt;D2(亩均税收)\n高级语法 数学公式 $\\ce{Hg^2+ -\u0026gt;[I-] HgI2 -\u0026gt;[I-] [Hg^{II}I4]^2-}$\n$H(D_2) = -\\left(\\frac{2}{4}\\log_2 \\frac{2}{4} + \\frac{2}{4}\\log_2 \\frac{2}{4}\\right) = 1$\n1 2 3 4 5 6 \\begin{pmatrix} 1 \u0026amp; a_1 \u0026amp; a_1^2 \u0026amp; \\cdots \u0026amp; a_1^n \\\\ 1 \u0026amp; a_2 \u0026amp; a_2^2 \u0026amp; \\cdots \u0026amp; a_2^n \\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ 1 \u0026amp; a_m \u0026amp; a_m^2 \u0026amp; \\cdots \u0026amp; a_m^n \\\\ \\end{pmatrix} 目录 @[toc] 或 [toc] HTML原生语句 橙色居右 橙色居中\n我是黑体字 我是微软雅黑 我是华文彩云 color=#0099ff size=72 face=\u0026ldquo;黑体\u0026rdquo; color=#00ffff color=gray\n颜色的英文单词：\nred（赤） orange（橙） yellow（黄） green（绿） cyan（青） blue（蓝） purple（紫） 字体的英文单词：\nrm（罗马字体） it （意大利字体） bf（黑体） sl （斜体） sf （等线体） sc （小体大写字母） tt （打字机字体） mit （数学斜体）\n转义 在 Markdown 编辑器里面使用了很多特殊符号来表示特定的意义，该特殊符号将不再显示，这个时候就需要转义字符——反斜杠，如下：\n**转义特殊符号正常显示**\n无转义特殊符号无法正常显示\n","date":"2024-11-11T00:40:48+08:00","image":"https://imgbed.worhllo.us.kg/file/1731732863804_Markdown.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/markdown%E8%AF%AD%E6%B3%95/","title":"Markdown语法"}]