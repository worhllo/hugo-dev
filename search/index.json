[{"content":"环境准备 下载Hugo 网址：Hugo官网\nGithub地址:gohugoio/hugo\n选择合适的版本下载。 下载git 点击Git官网\n点击 Download for Windows 按照指引安装即可。\n搭建博客 创建Blog 解压hugo_extended_0.134.2_windows-amd64.zip文件，在dev文件夹下进入cmd命令窗口**（全选文件路径，输入cmd后回车），输入hugo new site xxxx创建文件（xxx任意命名，此处以dev为例），代码输入无误之后就会生成一个你命名的文件夹。（注意不要急着关闭cmd命令窗口，后面接着要用到）**\n再次打开cmd命令窗口，输入cd dev\n将上图页面中的hugo.exe文件复制到dev文件内。\n在cmd命令行中输入hugo server -D，运行成功后会出现以下界面：\n![hugo server -D.png](https://imgbed.worhllo.us.kg/file/1731303348891_hugo server -D.png)\n此时，在浏览器中输入命令窗口中出现的链接，即http://localhost:1313/，如果操作无误，则会提示Page Not Found\n下载主题 再次进入Hugo官网。\n点击Themes选择一款适合的主题，这里以Stack这款主题为例。\n点击Download，下滑至Assets界面，并选择适当的版本，将源码下载下来。\n将文件解压，将其命名为hugo-theme-stack，移动至dev\\themes文件下，接着打开exampleSite文件夹，复制其中的 Content 和 hugo.yaml 复制到主文件夹dev中，然后删掉hugo.toml。\n![2024-11-11 13_49_16-dev.png](https://imgbed.worhllo.us.kg/file/1731304164618_2024-11-11 13_49_16-dev.png)\n再次打开cmd命令窗口，输入hugo server -D，打开浏览器输入http://localhost:1313/，若操作无误则主题会正常显示，并出现出相关范例文章。\nGithub部署 常规部署 前提条件：拥有一个属于自己的github账号，没有请自行注册。\n新建仓库，命名任意，但是最好命名为xxx(你的gitub用户名).github.io，**（后续生成的链接短，访问博客很方便）**选择Public，最后点击Creat respository\n进入到刚创建好的仓库后，前往setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，点击Save，等待一会儿，就会出现https://{github用户名}.github.io 的地址，该地址即为博客的访问地址。\n![333 (2).png](https://imgbed.worhllo.us.kg/file/1731305539095_333 (2).png)\n此时，原来的cmd命令窗口终于能关掉了，接着，在public文件夹**（跟之前不一样了，注意）下进入cmd命令窗口（全选文件路径，输入cmd后回车）**，依次以下命令，操作无误后刷新新建仓库，就会发现文件都上传到github仓库上面了。至此，hugo博客的基本搭建已经结束。\ncmd命令 git init git add . git commit -m \u0026quot;first commit\u0026quot; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main Github Action自动部署 ​ Github Actions是Github上一个类似于持续集成的功能，它允许你在一些节点上（如提交代码，特定时间等）触发一些操作，用到博客上之后，每次只需要在cmd命令行中提交3行简单代码， 就能实现上文将publish上传至github的繁琐操作，实现自动部署。\n在Github上面再次新建一个仓库，用于存放Hugo的主文件，名称任意设置，安全起见，建议将状态设置为private，接着点击Creat respository\n前往settings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)。\ntoken选择永不过期，并且勾选repo和workflow选项，最后点击generate，复制生成的token**（只会显示一次，注意保存）**\n为保证安全，可以将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置，任意命名，粘贴生成的token。\n回到hugo主文件dev，创建一个.github/workflows/xxxx.yaml文件，将下面的代码复制至xxxx.yaml文件中。（若出现必须键入文件名的提示，方法如下）\n1 2 3 4 5 6 解决方法 1、首先创建一个123.githuib的文件 2、在该文件所在目录上打开cmd命令窗口，输入rename 123.github .gitub 3、点击回车即可完成修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 接着在hugo主文件dev中创建.gitignore文件，来避免提交不必要的文件**（不需要hugo.exe，public，resources，.hugo_build.lock）**，文件内容如下\n1 2 # 自动生成的文件 public resources .hugo_build.lock\nhugo命令 hugo.exe\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 - 在`dev`文件夹**（又不一样了，注意）**下进入cmd命令窗口**（全选文件路径，输入cmd后回车）**，依次输入以下命令，操作无误后刷新，就会发现大部分文件都上传到github仓库上面了**（不必要的文件上一步已经排除掉了）**至此，hugo博客的自动部署也已经结束。 | cmd命令 | | ------ | | `git init` | | `git add` . | | `git commit -m \u0026#34;first commit\u0026#34;` | | `git branch -M main` | | `git remote add origin {你的github仓库地址}` | | `git push -u origin main` | ![777.png](https://imgbed.worhllo.us.kg/file/1731308860942_777.png) ## 后续新文章写作与上传 - 后续撰写新文章的话，按`三步走`就能实现本地撰写和线上同步 1. 在`dev`文件夹下进入cmd命令窗口**（全选文件路径，输入cmd后回车）**，输入`hugo new content post/xxxx/index.md`**（xxx名字自定)** 2. 在新创建的文件夹中会有`index.md`文件，在该文件中撰写文章 3. 在`dev`文件夹下再次进入cmd命令窗口**（全选文件路径，输入cmd后回车）**，依次输入以下命令即可 | cmd命令 | | ------------------------ | | `git add` . | | `git commit -m \u0026#34;upgate\u0026#34;` | | `git push` | ","date":"2024-11-11T13:12:41+08:00","image":"https://worhllo.github.io/hugo-dev/Featured%20image%20of%20post%20%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91Hugo+Github%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2.png","permalink":"https://worhllo.github.io/hugo-dev/p/hugo-github%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/","title":"Hugo+Github博客部署"},{"content":"[TOC]\nMarkdown语法介绍 一、标题 三号 四号 五号标题 六号标题【最低】 二、分割线 *号分割线 -分割线 三、粗体斜体 斜体\n粗体\n删除线\n四、超链接和图片 超链接,方法1\n超链接,方法2\n五、无序列表 a b b C V B 六、有序列表 a b c c 七、文字引用 使用 \u0026gt; 表示，可以有多个 \u0026gt; 表示层级更深 第一层\n第二层 这样跳不下去\n还可更深\n这样就跳出去了\n八、行内代码 其实上边已经用过很多次，即使用 ` 表示\n这是行内代码 中间可以换行\n九、代码块 1 2 ​```代码段``` import os 十、表格 商品name price num 靠左 靠右 3 3 4 2 十一、流程图 解释一下这个例子：\nmermaid是Mermaid语言的标记。\ngraph TD;指定了图的类型和方向，这里是从上到下（Top Down）的有向图（Directed Graph）。\nA--\u0026gt;B;和A--\u0026gt;C;表示两个箭头从A出发分别指向B和C。\nB--\u0026gt;D;和C--\u0026gt;D;表示两个箭头从B和C出发分别指向D。\nmermaid graph TD A(工业用地效率)\u0026ndash;\u0026gt;B1(土地利用强度) A\u0026ndash;\u0026gt;B2(土地经济效益) B1\u0026ndash;\u0026gt;C1(容积率) B1\u0026ndash;\u0026gt;C2(建筑系数) B1\u0026ndash;\u0026gt;C3(亩均固定资本投入) B2\u0026ndash;\u0026gt;D1(亩均工业产值) B2\u0026ndash;\u0026gt;D2(亩均税收)\n高级语法 数学公式 $\\ce{Hg^2+ -\u0026gt;[I-] HgI2 -\u0026gt;[I-] [Hg^{II}I4]^2-}$\n$H(D_2) = -\\left(\\frac{2}{4}\\log_2 \\frac{2}{4} + \\frac{2}{4}\\log_2 \\frac{2}{4}\\right) = 1$\n1 2 3 4 5 6 \\begin{pmatrix} 1 \u0026amp; a_1 \u0026amp; a_1^2 \u0026amp; \\cdots \u0026amp; a_1^n \\\\ 1 \u0026amp; a_2 \u0026amp; a_2^2 \u0026amp; \\cdots \u0026amp; a_2^n \\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ 1 \u0026amp; a_m \u0026amp; a_m^2 \u0026amp; \\cdots \u0026amp; a_m^n \\\\ \\end{pmatrix} 目录 @[toc] 或 [toc] HTML原生语句 橙色居右 橙色居中\n我是黑体字 我是微软雅黑 我是华文彩云 color=#0099ff size=72 face=\u0026ldquo;黑体\u0026rdquo; color=#00ffff color=gray\n颜色的英文单词：\nred（赤） orange（橙） yellow（黄） green（绿） cyan（青） blue（蓝） purple（紫） 字体的英文单词：\nrm（罗马字体） it （意大利字体） bf（黑体） sl （斜体） sf （等线体） sc （小体大写字母） tt （打字机字体） mit （数学斜体）\n转义 在 Markdown 编辑器里面使用了很多特殊符号来表示特定的意义，该特殊符号将不再显示，这个时候就需要转义字符——反斜杠，如下：\n**转义特殊符号正常显示**\n无转义特殊符号无法正常显示\n","date":"2024-11-11T00:40:48+08:00","image":"https://worhllo.github.io/hugo-dev/p/markdown%E8%AF%AD%E6%B3%95/Markdown_hu10405977557901028467.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/markdown%E8%AF%AD%E6%B3%95/","title":"Markdown语法"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://worhllo.github.io/hugo-dev/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://worhllo.github.io/hugo-dev/p/emoji-support/","title":"Emoji Support"}]